#include <iostream>
#include <vector>

using namespace std;

// Function to find the maximum element in the array
int findMax(vector<int> arr, int n) {
    int mx = arr[0];
    for (int i = 1; i < n; i++)
        if (arr[i] > mx)
            mx = arr[i];
    return mx;
}

// Function to do counting sort of arr[] according to the digit represented by exp.
void countingSort(vector<int> &arr, int n, int exp) {
    vector<int> output(n), count(10, 0);

    // Store count of occurrences in count[]
    for (int i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    // Change count[i] so that count[i] now contains actual position of this digit in output[]
    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // Copy the output array to arr[], so that arr[] now contains sorted numbers according to current digit
    for (int i = 0; i < n; i++)
        arr[i] = output[i];
}

// Radix Sort function
void radixSort(vector<int> &arr, int n) {
    int m = findMax(arr, n);

    // Do counting sort for every digit.
    // Instead of passing digit number, exp is passed. exp is 10^i where i is the current digit number
    for (int exp = 1; m / exp > 0; exp *= 10)
        countingSort(arr, n, exp);
}

// Driver code
int main() {
    vector<int> arr = {170, 45, 75, 90, 802, 24, 2, 66};
    int n = arr.size();

    // Function call
    radixSort(arr, n);

    // Print sorted array
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";

    return 0;
}
